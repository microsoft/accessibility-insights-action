// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

const { writeFileSync } = require('fs');
const ado = require('../task.json');

// Do not document the following inputs:
const exclude = ['hostingMode'];

// Create array of inputs to document:
const inputs = ado.inputs.filter(({ name }) => !exclude.includes(name));

// Build the layout for the documentation and supplement as needed:
const layout = [
    {
        heading: '## URL',
        inputs: ['url'],
    },
    {
        heading: '## Static site',
        inputs: ['staticSiteDir', 'staticSiteUrlRelativePath', 'staticSitePort'],
    },
    {
        heading: '## Authentication',
        description:
            'If your site requires authentication in order to be scanned, you can create a service account, store its credentials in key vault, and use it to authenticate with the Accessibility Insights for Azure DevOps extension. We currently support Azure Active Directory (AAD) authentication.',
        inputs: ['authType', 'serviceAccountName', 'serviceAccountPassword'],
    },
];

// Create and "Additional inputs" section
// This section will list all inputs not already added in `layout`
layout.push({
    heading: '## Additional inputs',
    inputs: getAdditionalInputs(),
});

// Build and write documentation:
writeFileSync('../../docs/ado-extension-inputs.md', createMarkdown());

//
// Documentation functions
//

function createMarkdown() {
    return `<!--
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License.
-->

<!--
DO NOT EDIT THIS FILE DIRECTLY
The content is generated by scripts/documentation.js
-->

# Accessibility Insights for Azure DevOps inputs

Your site must be served (hosted) before the extension can scan it, choose from [URL mode](#url) or [Static site mode](#static-site).

${layout.map(buildSection).join('\n')}`;
}

function buildSection({ heading, inputs, description }) {
    return `${heading}

${description || ''}

${inputs.map(getInput).join('\n')}`;
}

function getInput(input) {
    const { name, type, required, defaultValue, helpMarkDown, options } = inputs.find(({ name }) => name === input);
    return `- \`${name}\` (${handleType(type, options)})${handleRequired(required)}.${handleDefault(defaultValue)} ${helpMarkDown}\n`;
}

function handleDefault(defaultValue) {
    return defaultValue ? ` Default: \`${defaultValue}\`.` : '';
}

function handleRequired(required) {
    return required ? ` **Required**` : '';
}

function handleType(type, options) {
    if (type !== 'pickList') return type;
    return `One of: ${Object.keys(options)
        .filter((f) => f)
        .map((o) => `"${o}"`)
        .join(', ')}`;
}

function getAdditionalInputs() {
    return inputs
        .filter(
            ({ name }) =>
                !layout
                    .map(({ inputs }) => inputs)
                    .flat()
                    .includes(name),
        )
        .map(({ name }) => name);
}
