{
    "$schema": "https://raw.githubusercontent.com/Microsoft/azure-pipelines-task-lib/master/tasks.schema.json",
    "id": "9fbe8277-f1b8-4d71-9045-5e6d815b46d8",
    "name": "accessibility-insights",
    "friendlyName": "Accessibility Insights Azure DevOps Task",
    "description": "Scan for accessibility issues in an Azure DevOps pipeline",
    "helpMarkDown": "For help with configuring and troubleshooting this task, see https://aka.ms/accessibility-insights-faq#azure-devops-extension",
    "category": "Test",
    "author": "Accessibility Insights",
    "version": {
        "Major": 1,
        "Minor": 0,
        "Patch": 0
    },
    "instanceNameFormat": "Run accessibility testing",
    "groups": [
        {
            "displayName": "Output Options",
            "isExpanded": true,
            "name": "outputOptions"
        },
        {
            "displayName": "Advanced Options",
            "isExpanded": false,
            "name": "advancedOptions"
        }
    ],
    "inputs": [
        {
            "name": "hostingMode",
            "type": "pickList",
            "label": "Hosting mode",
            "required": true,
            "options": {
                "staticSite": "Static site (HTML files in a local directory)",
                "dynamicSite": "URL (localhost, staging URL, or production URL)"
            },
            "helpMarkDown": "Note: not required in YAML configuration, only on classic pipelines UI. Your site must be served (hosted) before it can be scanned. In _Static site_ mode, this task will run a localhost webserver serving your site directory and scan that. In _URL_ mode, you must host your site yourself separately and specify a URL to scan. This can be either a localhost server you run in an earlier pipeline step, or a remote URL (for example, a staging environment).\n\nWhen switching between hosting modes in the classic pipeline, remove values for the previous hosting mode to prevent caching."
        },
        {
            "name": "staticSiteDir",
            "type": "string",
            "label": "Hosting mode: site directory",
            "required": true,
            "helpMarkDown": "The directory containing built HTML files that the extension will serve, scan, and crawl for accessibility issues.",
            "visibleRule": "hostingMode = staticSite"
        },
        {
            "name": "staticSiteUrlRelativePath",
            "type": "string",
            "label": "Hosting mode: base URL",
            "required": false,
            "defaultValue": "/",
            "helpMarkDown": "If using `staticSiteDir`, you can set the base URL when the site lives at a subpath of the domain, such as `/blog`. If unspecified, the site will be scanned at the root.",
            "visibleRule": "hostingMode = staticSite"
        },
        {
            "name": "staticSitePort",
            "type": "int",
            "label": "Hosting mode: port",
            "required": false,
            "helpMarkDown": "If using `staticSiteDir`, you can set the local website TCP port for the extension to use when serving the static site. If unspecified, a port will be set automatically. If the pipeline serves additional processes, set the port to avoid conflicts. If using `baselineFile`, set the port to make sure future scans will match the baseline file.",
            "visibleRule": "hostingMode = staticSite"
        },
        {
            "name": "url",
            "type": "string",
            "label": "Hosting mode: URL",
            "required": true,
            "helpMarkDown": "The URL to scan and crawl for accessibility issues.",
            "visibleRule": "hostingMode = dynamicSite"
        },
        {
            "name": "keepUrlFragment",
            "type": "boolean",
            "label": "Keep hash fragments in URLs.",
            "required": false,
            "defaultValue": false,
            "helpMarkDown": "To keep the hash fragment in the URLs. If set to false, it will remove the hash fragment from URL for example, http://www.example.com/#foo will be considered as http://www.example.com."
        },
        {
            "name": "authType",
            "type": "pickList",
            "label": "Authentication type",
            "required": false,
            "defaultValue": "",
            "options": {
                "": "None",
                "AAD": "Azure Active Directory"
            },
            "helpMarkDown": "For sites with authenticated pages, use with `serviceAccountName` and `serviceAccountPassword` to specify the authentication type. Learn [how to set up authentication](https://aka.ms/AI-action-auth)."
        },
        {
            "name": "serviceAccountName",
            "type": "string",
            "label": "Authentication: service account email address",
            "required": false,
            "helpMarkDown": "For sites with authenticated pages, set the email address for the non-people service account. Use the Key Vault task to securely set the email address. Learn [how to set up authentication with Key Vault](https://aka.ms/AI-action-auth).",
            "visibleRule": "authType = AAD"
        },
        {
            "name": "serviceAccountPassword",
            "type": "string",
            "label": "Authentication: service account password",
            "required": false,
            "helpMarkDown": "For sites with authenticated pages, set the password for the non-people service account. Use the Key Vault task to securely set the password. Learn [how to set up authentication with Key Vault](https://aka.ms/AI-action-auth).",
            "visibleRule": "authType = AAD"
        },
        {
            "name": "maxUrls",
            "type": "int",
            "label": "Maximum number of URLs",
            "defaultValue": "100",
            "required": false,
            "helpMarkDown": "Maximum number of pages opened by crawler. The crawl will stop when this limit is reached."
        },
        {
            "name": "discoveryPatterns",
            "type": "string",
            "label": "Discovery patterns",
            "required": false,
            "helpMarkDown": "List of RegEx patterns to crawl in addition to the provided URL, separated by space."
        },
        {
            "name": "inputFile",
            "type": "string",
            "label": "Input file",
            "required": false,
            "helpMarkDown": "File path that contains list of URLs (each separated by a new line) to scan in addition to URLs discovered from crawling the provided URL."
        },
        {
            "name": "inputUrls",
            "type": "string",
            "label": "Input URLs",
            "required": false,
            "helpMarkDown": "List of URLs to crawl in addition to URLs discovered from crawling the provided URL, separated by space."
        },
        {
            "name": "scanTimeout",
            "type": "int",
            "label": "Scan timeout (milliseconds)",
            "defaultValue": "90000",
            "required": false,
            "helpMarkDown": "The maximum timeout in milliseconds for the scan (excluding dependency setup)."
        },
        {
            "name": "failOnAccessibilityError",
            "type": "boolean",
            "label": "Fail on accessibility error",
            "defaultValue": true,
            "required": false,
            "helpMarkDown": "Fail the task if _any_ accessibility issues are detected, even if they are also present in the baseline file."
        },
        {
            "name": "baselineFile",
            "type": "string",
            "label": "Baseline file path",
            "required": false,
            "helpMarkDown": "The old baseline file path, a new baseline will be generated with the same name. If unspecified, the baseline option will be disabled. If a baseline is used, the task will fail if _any_ changes are detected between the baselined results and the current results. This behavior is independent of the value of `failOnAccessibilityError`"
        },
        {
            "name": "singleWorker",
            "type": "boolean",
            "label": "Uses a single crawler worker",
            "required": false,
            "defaultValue": true,
            "helpMarkDown": "To get deterministic scanning results when this value is set to `false`, make sure the value for `maxUrls` is larger than the total number of URLs in the website being scanned."
        },
        {
            "name": "uploadOutputArtifact",
            "type": "boolean",
            "label": "Upload output artifact",
            "defaultValue": true,
            "required": false,
            "helpMarkDown": "Automatically upload the result as an artifact to the build. Set to `false` if you need to upload the artifact manually in a separate task or publish step.",
            "groupName": "outputOptions"
        },
        {
            "name": "outputArtifactName",
            "type": "string",
            "label": "Output artifact name",
            "required": false,
            "defaultValue": "accessibility-reports",
            "helpMarkDown": "Name of the report artifact to be uploaded to the build. Ignored if `uploadOutputArtifact` is `false`.",
            "visibleRule": "uploadOutputArtifact = true",
            "groupName": "outputOptions"
        },
        {
            "name": "outputDir",
            "type": "string",
            "label": "Output directory",
            "required": false,
            "helpMarkDown": "Directory to write the scan output to. Its contents will be uploaded as a pipeline artifact unless `uploadOutputArtifact` is set to `false`. If unspecified, output will be written to a generated temporary directory.",
            "groupName": "outputOptions"
        },
        {
            "name": "snapshot",
            "type": "boolean",
            "label": "Snapshot",
            "required": false,
            "helpMarkDown": "Save snapshots of scanned pages as artifacts. These snapshots will show you exactly what the scanner sees when scanning the page. This requires `uploadOutputArtifact` to not be set to `false`.",
            "groupName": "outputOptions"
        },
        {
            "name": "chromePath",
            "type": "string",
            "label": "Chrome path",
            "required": false,
            "helpMarkDown": "Path to Chrome executable. By default, the task downloads a version of Chrome that is tested to work with this task.",
            "groupName": "advancedOptions"
        }
    ],
    "execution": {
        "Node16": {
            "target": "index.js"
        }
    },
    "minimumAgentVersion": "2.206.1"
}
