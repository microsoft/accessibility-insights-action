# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

parameters:
    - name: environment
      displayName: deployment environment
      type: string
    - name: shouldSign
      displayName: whether to sign VSIX file
      type: string
    - name: visibility
      displayName: marketplace visibility
      type: string

steps:
    - bash: |
          echo publisher ID: "$(PublisherID)"
          echo extension ID: "$(ExtensionID)"
          echo extension name: "$(ExtensionName)"
          echo extensionVersionOverride: "$(extensionVersionOverride)"
          echo environment: "${{ parameters.environment }}"
          echo shouldSign: "${{ parameters.shouldSign }}"
          echo appInsightsConnectionString: "$(AppInsightsConnectionString)"

    - task: TfxInstaller@3
      inputs:
          version: 'v0.7.x'

    - task: DownloadPipelineArtifact@2
      inputs:
          source: 'specific'
          runVersion: 'specific'
          project: $(resources.pipeline.accessibility-insights-action-ci.projectID)
          pipeline: $(resources.pipeline.accessibility-insights-action-ci.pipelineID)
          runId: $(resources.pipeline.accessibility-insights-action-ci.runID)
          artifact: ado-extension-drop
          path: '$(System.DefaultWorkingDirectory)/ado-extension-drop'
    - template: generate-vs-marketplace-token.yaml
    - task: QueryAzureDevOpsExtensionVersion@4
      name: QueryVersion
      inputs:
          connectTo: 'VsTeam'
          connectedServiceName: 'a11y-insights-vs-marketplace'
          publisherId: '$(PublisherID)'
          extensionId: '$(ExtensionID)'
          versionAction: 'Patch'
          extensionVersionOverride: 'extensionVersionOverride'

    # Keep this in sync with /packages/ado-extension/src/ado-extension-metadata.ts
    #
    # Note that AppInsightsConnectionString is optional; it is expected that it will be empty
    # in some environments (eg, all non-Microsoft-internal production releases)
    #
    # To learn about this specific bash syntax, search for the term "here document"
    - bash: |
          cat <<EndOfAdoExtensionMetadata > $(System.DefaultWorkingDirectory)/ado-extension-drop/pkg/ado-extension-metadata.json
          {
            "publisherId": "$(PublisherId)",
            "extensionId": "$(ExtensionID)",
            "extensionName": "$(ExtensionName)",
            "extensionVersion": "$(QueryVersion.Extension.Version)",
            "environment": "${{ parameters.environment }}",
            "appInsightsConnectionString": "$(AppInsightsConnectionString)"
          }
          EndOfAdoExtensionMetadata
      displayName: Embed extension metadata in ado-extension-metadata.json

    - task: PackageAzureDevOpsExtension@3
      inputs:
          rootFolder: '$(System.DefaultWorkingDirectory)/ado-extension-drop/'
          publisherId: '$(PublisherID)'
          extensionId: '$(ExtensionID)'
          extensionName: '$(ExtensionName)'
          extensionVersion: '$(QueryVersion.Extension.Version)'
          updateTasksVersion: true
          updateTasksId: true
          updateTasksVersionType: 'major'
          extensionVisibility: '${{parameters.visibility}}'
          extensionPricing: 'free'
          patternManifest: 'ado-extension.json'
          outputPath: '$(Build.ArtifactStagingDirectory)/${{ parameters.environment }}.vsix'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 6.0.x'
      inputs:
          packageType: 'sdk'
          version: '6.0.x'

    - task: EsrpCodeSigning@5
      condition: and(succeeded(), eq('${{ parameters.shouldSign }}', 'true'))
      displayName: 'ESRP: Sign VSIX file '
      inputs:
          ConnectedServiceName: 'a11y-insights-esrp-code-signing-mi'
          AppRegistrationClientId: $(esrp-app-registration-client-id)
          AppRegistrationTenantId: $(esrp-app-registration-tenant-id)
          AuthAKVName: 'a11y-insights-esrp-certs'
          AuthCertName: 'a11y-insights-action-esrp-auth-cert'
          AuthSignCertName: 'a11y-insights-action-esrp-cert'
          FolderPath: '$(Build.ArtifactStagingDirectory)'
          Pattern: '${{ parameters.environment }}.vsix'
          signConfigType: inlineSignParams
          inlineOperation: |
              [
                  {
                    "KeyCode" : "CP-233016",
                    "OperationCode" : "OpcSign",
                    "Parameters" : {
                        "FileDigest" : "/fd SHA256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                    },
                    {
                        "KeyCode" : "CP-233016",
                        "OperationCode" : "OpcVerify",
                        "Parameters" : {},
                        "ToolName" : "sign",
                        "ToolVersion" : "1.0"
                    }
              ]

    - task: PublishBuildArtifacts@1
      inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: '${{ parameters.environment }}-vsix'
          publishLocation: 'Container'
